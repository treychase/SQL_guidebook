name: SQL Guidebook CI/CD

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  test-sql-guidebook:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install jupyter nbconvert nbformat pandas
        pip install ipykernel
        python -m ipykernel install --user --name python3
        
    - name: 🔍 Check Required Files Exist
      run: |
        echo "Checking for required files..."
        
        # Check for Jupyter Notebook
        if [ -f "SQL_Guidebook.ipynb" ]; then
          echo "✅ SQL_Guidebook.ipynb found"
        else
          echo "❌ SQL_Guidebook.ipynb NOT found"
          exit 1
        fi
        
        # Check for README
        if [ -f "README.md" ]; then
          echo "✅ README.md found"
        else
          echo "⚠️  README.md NOT found (warning only)"
        fi
        
        # List all files for debugging
        echo "📂 Repository contents:"
        ls -la
        
    - name: 🧪 Execute Jupyter Notebook
      run: |
        echo "Executing SQL_Guidebook.ipynb..."
        jupyter nbconvert --to notebook --execute SQL_Guidebook.ipynb --output SQL_Guidebook_executed.ipynb
        
    - name: ✅ Verify Database Created
      run: |
        echo "Checking if database was created..."
        
        if [ -f "ecommerce.db" ]; then
          echo "✅ ecommerce.db created successfully"
          
          # Check database size
          db_size=$(stat -f%z "ecommerce.db" 2>/dev/null || stat -c%s "ecommerce.db" 2>/dev/null)
          echo "📊 Database size: $db_size bytes"
          
          # Verify database has tables using sqlite3
          echo "📋 Checking database tables..."
          sqlite3 ecommerce.db ".tables"
          
        else
          echo "❌ ecommerce.db was NOT created"
          exit 1
        fi
        
    - name: 🔬 Validate Database Content
      run: |
        echo "Validating database content..."
        
        # Check if tables have data
        echo "Checking customers table..."
        customer_count=$(sqlite3 ecommerce.db "SELECT COUNT(*) FROM customers;")
        echo "✅ Customers: $customer_count records"
        
        echo "Checking products table..."
        product_count=$(sqlite3 ecommerce.db "SELECT COUNT(*) FROM products;")
        echo "✅ Products: $product_count records"
        
        echo "Checking orders table..."
        order_count=$(sqlite3 ecommerce.db "SELECT COUNT(*) FROM orders;")
        echo "✅ Orders: $order_count records"
        
        echo "Checking order_items table..."
        item_count=$(sqlite3 ecommerce.db "SELECT COUNT(*) FROM order_items;")
        echo "✅ Order Items: $item_count records"
        
        # Verify minimum data requirements
        if [ "$customer_count" -ge 5 ] && [ "$product_count" -ge 5 ] && [ "$order_count" -ge 5 ]; then
          echo "✅ Database has sufficient data"
        else
          echo "❌ Database does not have enough data"
          exit 1
        fi
        
    - name: 📊 Generate Test Report
      if: always()
      run: |
        echo "# SQL Guidebook Test Report" > test_report.md
        echo "" >> test_report.md
        echo "## Test Results" >> test_report.md
        echo "" >> test_report.md
        echo "- **Date:** $(date)" >> test_report.md
        echo "- **Python Version:** $(python --version)" >> test_report.md
        echo "- **Jupyter Version:** $(jupyter --version | head -n 1)" >> test_report.md
        echo "" >> test_report.md
        
        if [ -f "ecommerce.db" ]; then
          echo "### Database Statistics" >> test_report.md
          echo "" >> test_report.md
          echo "- **Customers:** $(sqlite3 ecommerce.db 'SELECT COUNT(*) FROM customers;')" >> test_report.md
          echo "- **Products:** $(sqlite3 ecommerce.db 'SELECT COUNT(*) FROM products;')" >> test_report.md
          echo "- **Orders:** $(sqlite3 ecommerce.db 'SELECT COUNT(*) FROM orders;')" >> test_report.md
          echo "- **Order Items:** $(sqlite3 ecommerce.db 'SELECT COUNT(*) FROM order_items;')" >> test_report.md
          echo "- **Total Revenue:** \$$(sqlite3 ecommerce.db 'SELECT SUM(total_amount) FROM orders;')" >> test_report.md
        fi
        
        cat test_report.md
        
    - name: 📤 Upload Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: sql-guidebook-artifacts
        path: |
          SQL_Guidebook_executed.ipynb
          ecommerce.db
          test_report.md
        retention-days: 30
        
    - name: 🎉 Success Summary
      if: success()
      run: |
        echo "================================================"
        echo "✅ All tests passed successfully!"
        echo "================================================"
        echo "📓 Notebook executed without errors"
        echo "🗄️  Database created and validated"
        echo "📊 All data requirements met"
        echo "================================================"
